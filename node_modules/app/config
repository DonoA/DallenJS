var mysql = require('mysql');
var debug = require('debug')('DallenJS:server');

GLOBAL.plugins={mcme: [], bukkit: []};
GLOBAL.games=[];

GLOBAL.Conn_Str = {
  host     : '127.0.0.1',
  user     : 'root',
  password : '',
  database : 'dallenjs'
};

GLOBAL.Channels = ["mindcracknetwork",
                    "syndicate",
                    "froggen",
                    "therace",
                    "captainsparklez",
                    "nightblue3",
                    "sodapoppin",
                    "trick2g"];

var dbconnection = mysql.createConnection(GLOBAL.Conn_Str);

dbconnection.connect(function(err) {
  if (err) {
    console.error('error connecting: ' + err.stack);
    return;
  }
 
  console.log('connected as id ' + dbconnection.threadId);
});

var DBmanager = {
    getTwitchStats: function(channel){
                        debug("stats on " + channel);
    },
    pullDB: function(){
        var failed = false;
        GLOBAL.plugins={mcme: [], bukkit: []};
        GLOBAL.games=[];
        //load plugins for mcme and bukkit
        var q = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '"+GLOBAL.Conn_Str.database+"' AND  TABLE_NAME = 'plugins'";
        dbconnection.query(q, function(err, rows) {
            if(!err&&rows.length==0){
                q = "CREATE TABLE plugins "+
                    "(pluginID int AUTO_INCREMENT, name varchar(30), repo varchar(30), version varchar(30), download varchar(30), type varchar(10),"+
                    "PRIMARY KEY (pluginID)) CHARSET=utf8";
                dbconnection.query(q, function(err, rows) {console.log("Created Table for plugins"); if(err){failed = true;};});
            }else{
                q = "SELECT * FROM plugins WHERE type='bukkit'";
                dbconnection.query(q, function(err, rows) {
                    if(err){
                        console.log(q);
                        console.error(err.stack);
                        failed = true;
                    }else{
                        rows.forEach(function (i, e){
                            GLOBAL.plugins.bukkit.push(
                                {name: rows[e].name, 
                                 repo: rows[e].repo, 
                                 version: rows[e].version, 
                                 download: rows[e].download});
                        });
                    }
                });
                q = "SELECT * FROM plugins WHERE type='mcme'";
                dbconnection.query(q, function(err, rows) {
                    if(err){
                        console.log(q);
                        console.error(err.stack);
                        failed = true;
                    }else{
                        rows.forEach(function (i, e){
                            GLOBAL.plugins.mcme.push({
                                name: rows[e].name, 
                                repo: rows[e].repo, 
                                version: rows[e].version,
                                download: rows[e].download});
                        });
                    }
                });
            }
        });

        //load games
        var q = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '"+GLOBAL.Conn_Str.database+"' AND  TABLE_NAME = 'games'";
        dbconnection.query(q, function(err, rows){
            if(!err&&rows.length==0){
                q = "CREATE TABLE games "+
                    "(gameID int AUTO_INCREMENT, name varchar(30), path varchar(30), version varchar(30), blurb text, "+
                    "PRIMARY KEY (gameID)) CHARSET=utf8";
                dbconnection.query(q, function(err, rows) {console.log("Created Table for games"); if(err){debug(err.stack); failed = true;}});
            }else{
                q = "SELECT * FROM games";
                dbconnection.query(q, function(err, rows){
                    if(err){
                        debug(err.stack);
                        failed = true;
                    }else{
                        rows.forEach(function (i, e){
                            GLOBAL.games.push(
                                {name: rows[e].name.replace(new RegExp(' ', 'g'), '-'), 
                                 path: rows[e].path,
                                 extension: rows[e].extension,
                                 version: rows[e].version, 
                                 blurb: rows[e].blurb});
                        });
                    }
                });
            }
        });
        if(!failed){
            console.log("pulled DB!");
            return "pulled DB!";
        }else{
            console.error("Failed to pull DB!");
            return "Failed to pull DB!";
        }
        
    }
};

module.exports = DBmanager;